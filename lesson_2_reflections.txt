	What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, a hidden file named .git is created to hold the history of the files.
You need to do it to create this .git to make it into a repository, or else it would be just a regular file.

	How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area is different from the working directory as it is just a place where the current state 
of the file is saved to be later on saved into the repository as a commit.  They all contain the same files, however,
the staging area is stage 2 of creating commit, while working directory is 1 and repository is 3.  The things
inside the staging area comes from the working directory, and is later on pushed to the repository.

It offers the value that you get to chose which items to commit together.

	How can you use the staging area to make sure you have one commit per logical change?

You can use git diff --staged to see the difference between the repository and the staging area, 
and if it is one logical change, you can commit.  Or before you add your file to the staging area, you 
can use git diff to compare between the working directory and the old staging area to make sure you only 
made one logical change.  You would then add to the staging area and then commit.

	What are some situations when branches would be helpful in keeping 
your history organized? How would branches help?

Branches would be helpful in keeping your history organized when you would like to have a base case,
and try out what would happen if you made a change in this direction, and a change in that direction,
but not at the same time.  For example adding different versions of a website but not together.  

	How do the diagrams help you visualize the branch structure?

The diagrams help you visualize branch structure because it lets you see the branches drawn as branches rather
than numbers on a screen with no connections.  The branches allow you to see each parent branch and 
which branches are reachable and which ones are not.

	What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When you merge two branches together, you take bits and pieces from both branches and make them into one commit with 
functions from both branches.  For example, if you added a function on one branch and another on another, the head
you merge them to will have both of the merges.  We represent it in the diagram the way we do because the merged 
commit will have parents to both branches, therefore it is connected to both branches.  

	What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Gits automatic merging is much faster and less troublesome to use.  When it does not detect a conflict, the code
works perfectly well.  However, this is not always the case, as there are some instances when conflicts occur.  In this case u 
must merge manually, which might be better because only the developer really knows what the code is meant for, while git 
tries to take educated guesses.
